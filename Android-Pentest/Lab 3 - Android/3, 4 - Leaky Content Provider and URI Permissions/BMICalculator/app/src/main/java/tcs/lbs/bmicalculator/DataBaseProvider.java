package tcs.lbs.bmicalculator;

import android.content.ContentProvider;
import android.content.ContentValues;
import android.database.Cursor;
import android.net.Uri;
import android.content.ContentUris;
import android.content.Context;
import android.content.UriMatcher;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteOpenHelper;
import android.database.sqlite.SQLiteQueryBuilder;
import android.util.Log;

import java.util.HashMap;

public class DataBaseProvider extends ContentProvider
{
    static final String PROVIDER_NAME = "tcs.lbs.bmicalculator";
    static final String URL = "content://" + PROVIDER_NAME + "/database";
    static final Uri CONTENT_URI = Uri.parse(URL);

    static final String id = "id";
    static final String height = "height";
    static final String weight = "weight";
    static final String bmi = "bmi";
    static final int uriCode_ALL = 1;
    static final int uriCode_BMI = 2;
    static final UriMatcher uriMatcher;
    static
    {
        uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
        uriMatcher.addURI(PROVIDER_NAME, "database", uriCode_ALL);
        uriMatcher.addURI(PROVIDER_NAME, "database/*", uriCode_ALL);
        uriMatcher.addURI(PROVIDER_NAME, "bmi", uriCode_BMI);
        uriMatcher.addURI(PROVIDER_NAME, "bmi/*", uriCode_BMI);
    }

    private static HashMap<String, String> databaseAll;
    static
    {
        databaseAll = new HashMap<>();
        databaseAll.put("height", "height");
        databaseAll.put("weight", "weight");
        databaseAll.put("bmi", "bmi");
    }

    private static HashMap<String, String> onlyBMI;
    static
    {
        onlyBMI = new HashMap<>();
        onlyBMI.put("bmi", "bmi");
    }




    public DataBaseProvider()
    {
    }

    @Override
    public String getType(Uri uri)
    {
        switch (uriMatcher.match(uri))
        {
            case uriCode_ALL:
                return "vnd.android.cursor.dir/database";
            case uriCode_BMI:
                return "vnd.android.cursor.dir/BMI";
            default:
                throw new IllegalArgumentException("Unsupported URI: " + uri);
        }
    }

    @Override
    public boolean onCreate()
    {
        Context context = getContext();
        DatabaseHelper dbHelper = new DatabaseHelper(context);
        db = dbHelper.getWritableDatabase();
        if (db != null)
        {
            return true;
        }
        return false;
    }

    @Override
    public Cursor query(Uri uri, String[] projection, String selection,
                        String[] selectionArgs, String sortOrder)
    {
        SQLiteQueryBuilder qb = new SQLiteQueryBuilder();
        qb.setTables(TABLE_NAME);

        switch (uriMatcher.match(uri))
        {
            case uriCode_ALL:
                qb.setProjectionMap(databaseAll);
                break;
            case uriCode_BMI:
                qb.setProjectionMap(onlyBMI);
                break;
            default:
                throw new IllegalArgumentException("Unknown URI " + uri);
        }
        if (sortOrder == null || sortOrder == "") {
            sortOrder = id;
        }
        Cursor c = qb.query(db, projection, selection, selectionArgs, null, null, sortOrder);
        c.setNotificationUri(getContext().getContentResolver(), uri);
        return c;
    }

    @Override
    public Uri insert(Uri uri, ContentValues values)
    {
        switch (uriMatcher.match(uri))
        {
            case uriCode_ALL:
                long rowID = db.insert(TABLE_NAME, "", values);
                if (rowID > 0)
                {
                    Uri _uri = ContentUris.withAppendedId(CONTENT_URI, rowID);
                    getContext().getContentResolver().notifyChange(_uri, null);
                    return _uri;
                }
                break;
            default:
                throw new IllegalArgumentException("Unknown URI " + uri);
        }
        throw new SQLiteException("Failed to add a record into " + uri);
    }

    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs)
    {
        int count = 0;
        switch (uriMatcher.match(uri))
        {
            case uriCode_ALL:
                count = db.delete(TABLE_NAME, selection, selectionArgs);
                break;
            default:
                throw new IllegalArgumentException("Unknown URI " + uri);
        }
        getContext().getContentResolver().notifyChange(uri, null);
        return count;
    }

    @Override
    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs)
    {
        int count = 0;
        switch (uriMatcher.match(uri))
        {
            case uriCode_ALL:
                count = db.update(TABLE_NAME, values, selection, selectionArgs);
                break;
            default:
                throw new IllegalArgumentException("Unknown URI " + uri);
        }
        getContext().getContentResolver().notifyChange(uri, null);
        return count;
    }

    private SQLiteDatabase db;
    static final String DATABASE_NAME = "BMI_DB";
    static final String TABLE_NAME = "history";
    static final int DATABASE_VERSION = 1;
    static final String CREATE_DB_TABLE = " CREATE TABLE " + TABLE_NAME
            + " (id INTEGER PRIMARY KEY AUTOINCREMENT, "
            + "height TEXT NOT NULL, "
            + "weight TEXT NOT NULL, "
            + "bmi TEXT NOT NULL);";

    private static class DatabaseHelper extends SQLiteOpenHelper {
        DatabaseHelper(Context context) {
            super(context, DATABASE_NAME, null, DATABASE_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            db.execSQL(CREATE_DB_TABLE);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME);
            onCreate(db);
        }
    }
}